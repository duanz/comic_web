# Generated by Django 2.2.2 on 2020-03-19 09:54

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.manager
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='MemberViewHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='normal', max_length=10)),
                ('create_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user_id', models.IntegerField(default=0, verbose_name='用户ID')),
                ('data_type', models.CharField(choices=[('BOOK', '小说'), ('COMIC', '漫画')], default='BOOK', max_length=50, verbose_name='数据类型')),
                ('title', models.CharField(default='', max_length=15, verbose_name='主题')),
                ('chapter_title', models.CharField(default='', max_length=50, verbose_name='章节主题')),
                ('active', models.BooleanField(default=True, verbose_name='是否生效')),
                ('content_id', models.IntegerField(default=0, verbose_name='主题ID')),
                ('chapter_id', models.IntegerField(default=0, verbose_name='章节ID')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('normal', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='normal', max_length=10)),
                ('create_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('task_type', models.CharField(choices=[('BOOK_INSERT', '新增小说'), ('BOOK_CHAPTER_UPDATE', '更新小说章节'), ('COMIC_INSERT', '新增漫画'), ('COMIC_CHAPTER_UPDATE', '更新漫画章节')], default='BOOK_INSERT', max_length=50, verbose_name='任务类型')),
                ('active', models.BooleanField(default=False, verbose_name='是否生效')),
                ('user_id', models.IntegerField(default=0, verbose_name='下发任务用户ID')),
                ('task_status', models.CharField(choices=[('WAIT', '等待执行'), ('RUNNING', '执行中'), ('FINISH', '执行结束'), ('FAILD', '执行失败')], default='WAIT', max_length=50, verbose_name='任务状态')),
                ('content', models.CharField(default='', max_length=300, verbose_name='任务内容')),
                ('markup', models.CharField(default='', max_length=200, verbose_name='任务备注')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('normal', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('status', models.CharField(default='normal', max_length=10)),
                ('create_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('gender', models.CharField(choices=[('M', '男'), ('F', '女'), ('U', '未知')], max_length=2)),
                ('group_id', models.IntegerField(default=-1)),
                ('inviter_id', models.IntegerField(default=0, null=True)),
                ('markup', models.CharField(default='', max_length=300, null=True)),
                ('phone', models.CharField(default='', max_length=30, null=True)),
                ('avatar_url', models.CharField(default='', max_length=250, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
